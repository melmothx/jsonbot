#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

import sys, os, shutil

sys.path.insert(0, os.getcwd())

try:
    source = sys.argv[1]
    target = sys.argv[2]
except IndexError:
    print "bootstrap <old botdir> <new botdir>"
    os._exit(1)

orig = 'jsonbot'
new = target

def gethighest(ddir, ffile):
    highest = 0
    for i in os.listdir(ddir):
        if os.path.isdir(ddir + os.sep + i) and ffile in i:
            try:
                seqnr = i.split('.')[2]
            except IndexError:
                continue
            try:
                if int(seqnr) > highest:
                    highest = int(seqnr)  
            except ValueError:
                pass
    ffile += '.' + str(highest + 1)
    return ffile   

def dosed(filename, sedstring):
    f = open(filename, 'r')
    tmp = filename + '.tmp'
    fout = open(tmp, 'w')
    seds = sedstring.split('/')
    fr = seds[1].replace('\\', '')
    to = seds[2].replace('\\', '')
    try:
        for line in f:
            l = line.replace(fr,to)
            fout.write(l)
    finally:
        fout.flush()
        fout.close()
    try:
        os.rename(tmp, filename)
    except WindowsError:
        # no atomic operation supported on windows! error is thrown when destination exists
        os.remove(filename)
        os.rename(tmp, filename)

print "STARTING"

def bootstrap(source, target):

    print "source: %s target: %s" % (source, target)


    for f in os.listdir(target):
        if f.startswith('.'):
            continue
        try:
            print "sedding %s" % f
            dosed(target + os.sep + f, 's/%s/%s/' % (orig, new))
            dosed(target + os.sep + f, 's/%s/%s/' % (orig.upper(), new.upper()))
        except IOError, ex:
            if 'Is a dir' in str(ex):
                bootstrap(source + os.sep + f, target + os.sep + f)
            else:
                raise

print "making backup"

if os.path.isdir(target + '.old'):
    backup = gethighest(os.getcwd(), target + '.old')
else:
    backup = target + '.old'

if os.path.isdir(target): 
    print "MOVING %s TO %s" % (target, backup)
    os.rename(target, backup)

print "COPYING RESULTS TO %s" % target

try:
    shutil.copytree(source, target)
except OSError:
    print "can't copy %s to %s" % (source, target)
    os._exit(1)

bootstrap(source, target)
    
print "DONE"
