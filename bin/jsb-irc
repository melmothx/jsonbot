#!/usr/bin/env python
#
#

## bootstrap

import warnings
warnings.simplefilter("ignore")

import os, sys
sys.path.insert(0, os.getcwd())

from gozerlib.utils.generic import getversion
print getversion('IRC')

## gozerlib imports

from gozerlib.socklib.partyline import partyline
from gozerlib.socklib.irc.bot import IRCBot
from gozerlib.datadir import makedirs
from gozerlib.boot import plugin_packages, boot
from gozerlib.utils.log import setloglevel
from gozerlib.config import Config
from gozerlib.config import cfg as mainconfig
from gozerlib.errors import NoOwnerSet
from gozerlib.fleet import fleet
from gozerlib.utils.mainloop import mainloop

import gozerlib.users as users
import gozerlib

## basic imports

from simplejson import load
import logging
import time
import os

## options parser

if True:
    from optparse import OptionParser
    parser = OptionParser(usage='usage: %prog [options]', version='%prog ' + getversion())
    parser.add_option('', '-r', type='string', default=False, dest='doresume', 
                  metavar='PATH', 
                  help="resume the bot from the folder specified")
    parser.add_option('-o', '--owner', type='string', default=False,
dest='owner', 
                  help="owner of the bot")
    parser.add_option('-s', '--server', type='string', default=False,
dest='server', 
                  help="server to connect to (irc)")
    parser.add_option('-c', '--channel', type='string', default=False,
dest='channel', 
                  help="channel to join")
    parser.add_option('-l', '--loglevel', type='string', default=False,
dest='loglevel', 
                  help="loglevel of the bot .. the lower the more it logs")
    parser.add_option('-e', '--encoding', type='string', default=False,
dest='encoding', 
                  help="set default encoding of the bot")
    parser.add_option('-p', '--pass', type='string', default=False,
dest='password', 
                  help="set password used to connect to the server")
    parser.add_option('-n', '--name', type='string', default=False,
dest='name', 
                  help="bot's name")
    parser.add_option('', '--port', type='string', default=False,
dest='port', 
                  help="set port of server to connect to")
    parser.add_option('-x', '--ssl', action='store_true', default=False,
dest='ssl', 
                  help="use ssl")
    parser.add_option('-y', '--nossl', action='store_true', default=False,
dest='nossl', 
                  help="don't use ssl")
    parser.add_option('', '--save', action='store_true', default=False,
dest='save', 
                  help="save to config file")
    parser.add_option('-f', '--fleet', action='store_true', default=False,
dest='fleet', 
                  help="add bot to the fleet")
    parser.add_option('', '--nick', type='string', default='jsonbot',
dest='nick', 
                  help="set nickname of the bot")

    opts, args = parser.parse_args()
    opts.args = args

name = opts.name or 'default-IRCBot'
cfg = Config('fleet' + os.sep + name + os.sep + 'config')
cfg.name = name

if not cfg.owner:
    cfg.owner = []

if opts.owner and opts.owner not in cfg.owner:
    cfg.owner.append(opts.owner)

if opts.loglevel:
    cfg.loglevel = opts.loglevel
else:
    cfg.loglevel = cfg.loglevel or "warning"

if opts.ssl:
    cfg.ssl = True

if opts.nossl:
    cfg.ssl = False

if opts.port:
    cfg.port = opts.port
else:
    cfg.port = 6667

if opts.server:
    cfg.server = opts.server
else:
    cfg.server = cfg.server or "localhost"

if opts.name:
    cfg.jid = cfg.name = opts.name
else:
    cfg.jid = cfg.name = 'default-irc'

if opts.nick:
    cfg.nick = opts.nick
else:
    cfg.nick = 'jsonbot'

cfg.type = "irc"
cfg.save()

## runtime

setloglevel(cfg.loglevel)

makedirs()
logging.warn("irc - owner is %s" % cfg.owner)
boot()

from gozerlib.plugins import plugs
plugs.loadall()

if opts.doresume and os.path.isfile(opts.doresume):
    if fleet.size():
        fleet.resume(opts.doresume)
        fleet.startok.wait()
    else:
        #  resume bot from session file
        session = load(open(opts.doresume))
        for name in session['bots'].keys():
            reto = None
            if name == session['name']:
                reto = session['channel']
        bot = IRCBot(cfg)
        bot._resume(session['bots'][name], reto)

    partyline.resume(opts.doresume)
    os.unlink(opts.doresume) # bye
    fleet.startall()

else:

    ## start bot
    try:
        bot = IRCBot(cfg)
        bot.nick = cfg.nick or 'jsonbot'
    except NoOwnerSet, ex:
        print "owner is not set in %s - use the -o option" % str(ex)
        os._exit(1)

    if opts.channel and not opts.channel in bot.state['joinedchannels']:
        bot.state['joinedchannels'].append(opts.channel)
        bot.state.save()

    if opts.fleet:
        fleet.addbot(bot)

    bot.start()

mainloop()
