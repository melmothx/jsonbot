#!/usr/bin/env python
#
#

## gozerlib imports

from gozerlib.utils.generic import getversion
from gozerlib.utils.url import posturl, getpostdata
from gozerlib.socket.rest.server import RestServer, RestRequestHandler
from gozerlib.eventbase import EventBase
from gozerlib.utils.exception import handle_exception
from gozerlib.examples import examples
from gozerlib.config import Config

## simplejson imports

from simplejson import dumps

## basic imports

import socket
import re
import logging

## options parsing

from optparse import OptionParser 

parser = OptionParser(usage='usage: %prog [options]', version='%prog ' + getversion())
parser.add_option('-s', '--server', type='string',
                  default=socket.gethostbyname(socket.getfqdn()),
                  dest='server',
                  help="host to run the bot on")

parser.add_option('-p', '--port', type='string', default='11111',
                  dest='port',   
                  help="port of the server")

opts, args = parser.parse_args()
opts.args = args

## defines

cfg = Config("restserver")
if not cfg.disable:
    cfg.disable = []

if opts.server:
    cfg.host = opts.server

if opts.port:
    cfg.port = int(opts.port)

hp = "%s:%s" % (cfg.get('host'), cfg.get('port'))
url = "http://%s" % hp
server = None

## functions

def startserver(force=False):
    global server 
    if server and not force:
        logging.info("REST server is already running. ")
        return server

    try:
        server = RestServer((cfg.get('host'), cfg.get('port')), RestRequestHandler)

        if server:
            server.start()
            logging.warn('restserver - running at %s:%s' % (cfg.get('host'), cfg.get('port')))

            for mount in cfg.get('disable'):
                server.disable(mount)
        else:
            logging.error('restserver - failed to start server at %s:%s' % (cfg.get('host'), cfg.get('port')))

    except socket.error, ex:
        logging.warn('restserver - start - socket error: %s' % str(ex))

    except Exception, ex:
        handle_exception()

    return server

def stopserver():

    try:
        if not server:
            logging.warn('restserver - server is already stopped')
            return

        server.shutdown()

    except Exception, ex:
        handle_exception()
        pass

startserver()
if not server:
    print "can't start server"
else:
    server.serve()
