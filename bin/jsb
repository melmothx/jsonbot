#!/usr/bin/env python
#
#

""" Console Bot. """

## bootstrap

import warnings
warnings.simplefilter("ignore")

import os, sys
sys.path.insert(0, os.getcwd())

from gozerlib.version import getversion
print getversion('CONSOLE')

## make config from cmndline options

from gozerlib.utils.opts import makeopts, makeconfig
opts = makeopts()

from gozerlib.boot import boot
boot(opts.datadir)

forwardcfg = makeconfig('sxmpp', opts, 'forwardbot') # sxmpp for the forward bot
cfg = makeconfig('console', opts) # sxmpp for the forward bot

## set loglevel

from gozerlib.utils.log import setloglevel
setloglevel(opts.loglevel or "error")
 
# gozerlib imports

from gozerlib.utils.generic import waitforqueue
from gozerlib.utils.mainloop import mainloop
from gozerlib.plugins import Plugins
from gozerlib.console.bot import ConsoleBot
from gozerlib.console.event import ConsoleEvent
from gozerlib.plugins import Plugins
from gozerlib.config import Config
from gozerlib.datadir import makedirs, datadir
from gozerlib.users import Users, users
from gozerlib.errors import NoOwnerSet
from gozerlib.threads import start_new_thread
from gozerlib.utils.opts import makeconfig, makeopts
from gozerlib.fleet import fleet

## basic imports

import getpass
import logging
import time
import code
import readline
import atexit
import os

## start the bot

userid = getpass.getuser() + '@' + cfg.uuid

if userid not in cfg.owner: cfg.owner.append(userid)

try: bot = ConsoleBot(cfg)
except NoOwnerSet:
    print "the owner is not set in %s" % cfg.cfile
    os._exit(1)

if opts.command:
    result = bot.docmnd(userid, opts.channel or "console", opts.command + u' '+ u' '.join(opts.args))
    if result:
        waitforqueue(result.inqueue, 60)
        print "command done. ltrs"
    else: print "can't execute %s" % opts.command    
    os._exit(0)
elif opts.forward:
    fleet.addbot(bot)
    print "starting forward bot (%s)" % str(cfg)
    forwardbot = fleet.makebot('sxmpp', 'forwardbot', cfg=forwardcfg)
    forwardbot.start()

bot.start()
