#!/usr/bin/env python
#
#

""" install the GAE upload dir so it can be uploaded. """

## bootstrap

import warnings
warnings.simplefilter("ignore")

## imports

import sys
import os
import pkg_resources
import shutil

sys.path.insert(0, os.getcwd())

## gozerlib imports

from gozerlib.utils.generic import gethighest, dosed
from gozerlib.version import getversion
from gozerlib.datadir import getdatadir

## options

from optparse import OptionParser
parser = OptionParser(usage='usage: %prog [options]', version='%prog ' + getversion())
parser.add_option('-b', '--backup', action='store_true', default=False, dest='backup', help="remove backup dir")
parser.add_option('-d', '--datadir', type='string', default=False, dest='datadir', help="datadir to use")
opts, args = parser.parse_args()
opts.args = args

if opts.datadir and not os.path.isdir(opts.datadir): os.mkdir(opts.datadir)

if len(sys.argv) > 1:
     ddir = opts.datadir or getdatadir()
     if not os.path.isdir(ddir + os.sep + 'releases'):
         os.mkdir(ddir + os.sep + 'releases')
     release = ddir + os.sep + 'releases' + os.sep + sys.argv[1]
     if not os.path.isdir(release):
         os.mkdir(release)
     targetin = sys.argv[1]
else:
     release = opts.datadir or getdatadir() + os.sep + "releases" + os.sep + 'jsonbot'
     targetin = 'jsonbot'


if os.path.isdir(release + '.old'):
    backup = (opts.datadir or getdatadir()) + 'releases' + os.sep + gethighest('releases', targetin + '.old')
else:
    backup = release + '.old'

if os.path.isdir(release):
    print "MOVING %s TO %s" % (release, backup)
    os.rename(release, backup)

## define

orig = 'jsonbot'

## functions

def copyover(source, target):
    print "COPYING RESULTS TO %s" % target
    shutil.copytree(source, target)   
    if len(sys.argv) > 1:
        sed(source, target)
  
def sed(source, target):
    print "source: %s target: %s" % (source, target)

    for f in os.listdir(target):
        if f.startswith('..'):
            continue
        if f.endswith(".pyc"):
            continue
        if f.endswith("~"):
            continue
        if os.path.isdir(target + os.sep + f):
            sed(source + os.sep + f, target + os.sep + f)
            continue
        else:
            print "sedding %s (%s) - %s" % (f, orig, targetin)
            dosed(target + os.sep + f, 's/%s/%s/' % (orig, targetin))
            dosed(target + os.sep + f, 's/%s/%s/' % (orig.upper(), targetin.upper()))


## doit

source = pkg_resources.resource_filename("gaeupload", '')
copyover(source, release)
source = pkg_resources.resource_filename("gozerdata", '')
copyover(source, release + os.sep + "gozerdata")
source = pkg_resources.resource_filename("tests", '')
copyover(source, release + os.sep + 'tests')
source = pkg_resources.resource_filename('gozerlib', '')
copyover(source, release + os.sep + 'gozerlib')
source = pkg_resources.resource_filename('commonplugs', '')
copyover(source, release + os.sep + 'commonplugs')
source = pkg_resources.resource_filename('socketplugs', '')
copyover(source, release + os.sep + 'socketplugs')
source = pkg_resources.resource_filename('waveplugs', '')
copyover(source, release + os.sep + 'waveplugs')
source = pkg_resources.resource_filename('simplejson', '')
copyover(source, release + os.sep + 'simplejson')
source = pkg_resources.resource_filename('tweepy', '')
copyover(source, release + os.sep + 'tweepy')

homedir = os.path.expanduser("~")
try:
    shutil.move(release + os.sep + 'gozerdata' + os.sep + 'config', release + os.sep + 'gozerdata' + os.sep + 'config.bck')
except IOError, ex:
    print "TAKE NOTE ! no %s dir available" % os.path.join(release, "gozerdata", "config")

if not os.path.isdir(homedir + os.sep + 'jsonregs'):
   os.mkdir(homedir + os.sep + 'jsonregs')

#if not os.path.isdir(homedir + os.sep + 'jsonregs' + os.sep + targetin):
#   os.mkdir(homedir + os.sep + 'jsonregs' + os.sep + targetin)

try:
    copyover(homedir + os.sep + 'jsonregs' + os.sep + targetin, release + os.sep + 'gozerdata' + os.sep + 'config')
    shutil.copy(homedir + os.sep + "jsonregs" + os.sep + targetin + os.sep + 'app.yaml', release + os.sep + 'app.yaml')
    shutil.copy(homedir + os.sep + "jsonregs" + os.sep + targetin + os.sep + 'cron.yaml', release + os.sep + 'cron.yaml')
except (OSError, IOError), ex:
    print "TAKE NOTE: %s" % str(ex)
    try:
        copyover(release + os.sep + 'gozerdata' + os.sep + 'examples', homedir + os.sep + 'jsonregs' + os.sep + targetin)
        print "please edit ~/jsonregs/%s/ dir and rerun this program." % (targetin,)
        os._exit(1)
    except OSError, ex:
        print "ERROR: can't copy files to ~/jsonregs %s" % str(ex)
        os._exit(1)


if os.path.isdir('docs'):
    copyover('docs', release + os.sep + 'docs')


if not opts.backup:
    print "REMOVING BACKUP"
    shutil.rmtree(backup)
else:
    print "CREATED BACKUP %s" % backup
